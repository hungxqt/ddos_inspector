#!/usr/bin/env python3

import time
import os
import re
import psutil
from prometheus_client import start_http_server, Gauge, Counter, Histogram
from prometheus_client.core import CollectorRegistry
import subprocess
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SnortStatsExporter:
    def __init__(self, port=9092):
        self.port = port
        self.registry = CollectorRegistry()
        
        # Snort process metrics
        self.snort_cpu_usage = Gauge('snort_cpu_usage_percent', 'Snort CPU usage percentage', registry=self.registry)
        self.snort_memory_usage = Gauge('snort_memory_usage_bytes', 'Snort memory usage in bytes', registry=self.registry)
        self.snort_uptime = Gauge('snort_uptime_seconds', 'Snort process uptime in seconds', registry=self.registry)
        
        # Snort statistics from stats output
        self.packets_analyzed = Counter('snort_packets_analyzed_total', 'Total packets analyzed by Snort', registry=self.registry)
        self.packets_filtered = Counter('snort_packets_filtered_total', 'Total packets filtered by Snort', registry=self.registry)
        self.alerts_generated = Counter('snort_alerts_generated_total', 'Total alerts generated by Snort', registry=self.registry)
        
        # Performance metrics
        self.packet_processing_rate = Gauge('snort_packet_processing_rate', 'Packets processed per second', registry=self.registry)
        self.dropped_packets = Counter('snort_dropped_packets_total', 'Total dropped packets', registry=self.registry)
        
        # Rule statistics
        self.active_rules = Gauge('snort_active_rules_count', 'Number of active Snort rules', registry=self.registry)
        
        # File monitoring
        self.log_file_size = Gauge('snort_log_file_size_bytes', 'Size of Snort log files', ['file_type'], registry=self.registry)
        
        # Network interface statistics
        self.interface_bytes_received = Counter('snort_interface_bytes_received_total', 'Total bytes received on monitored interface', registry=self.registry)
        self.interface_packets_received = Counter('snort_interface_packets_received_total', 'Total packets received on monitored interface', registry=self.registry)
        
        # Track previous values for rate calculations
        self.previous_stats = {}
        self.last_update_time = time.time()
        
    def get_snort_process(self):
        """Find the Snort process"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                if proc.info['name'] and 'snort' in proc.info['name'].lower():
                    return psutil.Process(proc.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
        return None
    
    def collect_process_metrics(self):
        """Collect Snort process metrics"""
        snort_proc = self.get_snort_process()
        if snort_proc:
            try:
                # CPU and memory usage
                cpu_percent = snort_proc.cpu_percent()
                memory_info = snort_proc.memory_info()
                
                self.snort_cpu_usage.set(cpu_percent)
                self.snort_memory_usage.set(memory_info.rss)
                
                # Process uptime
                create_time = snort_proc.create_time()
                uptime = time.time() - create_time
                self.snort_uptime.set(uptime)
                
                logger.info(f"Snort process metrics - CPU: {cpu_percent}%, Memory: {memory_info.rss / 1024 / 1024:.1f}MB, Uptime: {uptime:.0f}s")
                
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                logger.warning(f"Could not collect process metrics: {e}")
        else:
            logger.warning("Snort process not found")
    
    def parse_snort_stats(self):
        """Parse Snort statistics from various sources"""
        # Try to get stats from Snort's stats output
        try:
            # Check if snort stats command is available
            result = subprocess.run(['snort', '--help'], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                # Get packet statistics from interface
                self.collect_interface_stats()
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            logger.debug("Snort command not available, using alternative methods")
        
        # Parse log files for statistics
        self.parse_log_files()
    
    def collect_interface_stats(self):
        """Collect network interface statistics"""
        try:
            # Get network interface statistics
            net_io = psutil.net_io_counters()
            if net_io:
                current_time = time.time()
                
                # Calculate rates if we have previous data
                if 'bytes_recv' in self.previous_stats:
                    time_diff = current_time - self.last_update_time
                    if time_diff > 0:
                        bytes_diff = net_io.bytes_recv - self.previous_stats['bytes_recv']
                        packets_diff = net_io.packets_recv - self.previous_stats['packets_recv']
                        
                        # Update counters
                        self.interface_bytes_received._value._value = net_io.bytes_recv
                        self.interface_packets_received._value._value = net_io.packets_recv
                        
                        # Calculate packet processing rate
                        packet_rate = packets_diff / time_diff
                        self.packet_processing_rate.set(packet_rate)
                
                # Store current values for next calculation
                self.previous_stats['bytes_recv'] = net_io.bytes_recv
                self.previous_stats['packets_recv'] = net_io.packets_recv
                self.last_update_time = current_time
                
        except Exception as e:
            logger.error(f"Error collecting interface stats: {e}")
    
    def parse_log_files(self):
        """Parse Snort log files for statistics"""
        log_paths = [
            '/var/log/snort/alert',
            '/var/log/snort/snort.log',
            '/app/logs/alert',
            '/app/logs/snort.log'
        ]
        
        for log_path in log_paths:
            if os.path.exists(log_path):
                try:
                    # Get file size
                    file_size = os.path.getsize(log_path)
                    file_type = os.path.basename(log_path)
                    self.log_file_size.labels(file_type=file_type).set(file_size)
                    
                    # Count alerts in alert file
                    if 'alert' in log_path:
                        alert_count = self.count_alerts(log_path)
                        self.alerts_generated._value._value = alert_count
                        
                except OSError as e:
                    logger.debug(f"Could not access log file {log_path}: {e}")
    
    def count_alerts(self, alert_file):
        """Count the number of alerts in the alert file"""
        try:
            with open(alert_file, 'r') as f:
                lines = f.readlines()
                return len([line for line in lines if line.strip()])
        except Exception as e:
            logger.debug(f"Could not count alerts in {alert_file}: {e}")
            return 0
    
    def collect_rule_stats(self):
        """Collect Snort rule statistics"""
        try:
            # Try to get rule count from Snort configuration
            rule_paths = [
                '/etc/snort/rules/',
                '/usr/local/etc/snort/rules/',
                '/opt/snort/rules/'
            ]
            
            total_rules = 0
            for rule_path in rule_paths:
                if os.path.exists(rule_path):
                    for root, dirs, files in os.walk(rule_path):
                        for file in files:
                            if file.endswith('.rules'):
                                try:
                                    with open(os.path.join(root, file), 'r') as f:
                                        content = f.read()
                                        # Count active rules (not commented out)
                                        active_rule_count = len([line for line in content.split('\n') 
                                                               if line.strip() and not line.strip().startswith('#') 
                                                               and ('alert' in line or 'pass' in line or 'drop' in line)])
                                        total_rules += active_rule_count
                                except Exception as e:
                                    logger.debug(f"Could not parse rule file {file}: {e}")
            
            self.active_rules.set(total_rules)
            logger.info(f"Active Snort rules: {total_rules}")
            
        except Exception as e:
            logger.debug(f"Could not collect rule statistics: {e}")
    
    def collect_all_metrics(self):
        """Collect all metrics"""
        logger.info("Collecting Snort metrics...")
        
        self.collect_process_metrics()
        self.parse_snort_stats()
        self.collect_rule_stats()
        
        logger.info("Metrics collection completed")
    
    def start_server(self):
        """Start the Prometheus metrics server"""
        start_http_server(self.port, registry=self.registry)
        logger.info(f"Snort stats exporter started on port {self.port}")
        
        while True:
            try:
                self.collect_all_metrics()
                time.sleep(10)  # Collect metrics every 10 seconds
            except KeyboardInterrupt:
                logger.info("Shutting down Snort stats exporter")
                break
            except Exception as e:
                logger.error(f"Error during metrics collection: {e}")
                time.sleep(10)

if __name__ == '__main__':
    exporter = SnortStatsExporter()
    exporter.start_server()
