input {
  file {
    path => "/var/log/snort/alert"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain
    tags => ["snort_alert"]
  }
  
  file {
    path => "/var/log/snort/snort.log*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain
    tags => ["snort_log"]
  }
}

filter {
  if "snort_alert" in [tags] {
    # Parse Snort alert format
    grok {
      match => { 
        "message" => "%{MONTHDAY:month}/%{MONTHDAY:day}-%{TIME:time} \[%{DATA:gid}:%{DATA:sid}:%{DATA:rev}\] %{DATA:alert_msg} \[Classification: %{DATA:classification}\] \[Priority: %{DATA:priority}\] \{%{DATA:protocol}\} %{IPV4:src_ip}:%{DATA:src_port} -> %{IPV4:dst_ip}:%{DATA:dst_port}"
      }
    }
    
    # Add timestamp
    mutate {
      add_field => { "timestamp" => "%{month}/%{day} %{time}" }
    }
    
    # Convert fields to proper types
    mutate {
      convert => { 
        "priority" => "integer"
        "src_port" => "integer"
        "dst_port" => "integer"
      }
    }
    
    # Extract DDoS Inspector specific fields
    if [alert_msg] =~ /DDoS Inspector/ {
      mutate {
        add_tag => ["ddos_detection"]
      }
      
      # Extract attack type from message
      if [alert_msg] =~ /SYN flood/ {
        mutate { add_field => { "attack_type" => "syn_flood" } }
      } else if [alert_msg] =~ /Slowloris|HTTP flood/ {
        mutate { add_field => { "attack_type" => "slowloris" } }
      } else if [alert_msg] =~ /UDP flood/ {
        mutate { add_field => { "attack_type" => "udp_flood" } }
      } else if [alert_msg] =~ /ICMP flood/ {
        mutate { add_field => { "attack_type" => "icmp_flood" } }
      }
    }
    
    # GeoIP enrichment
    geoip {
      source => "src_ip"
      target => "src_geoip"
    }
    
    geoip {
      source => "dst_ip" 
      target => "dst_geoip"
    }
  }
  
  if "snort_log" in [tags] {
    # Parse general Snort logs
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{DATA:log_level}: %{GREEDYDATA:log_message}"
      }
    }
  }
  
  # Add common fields
  mutate {
    add_field => { 
      "log_source" => "snort"
      "detection_system" => "ddos_inspector"
    }
  }
  
  # Parse timestamp
  date {
    match => [ "timestamp", "MM/dd HH:mm:ss.SSSSSS", "ISO8601" ]
    target => "@timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "snort-logs-%{+YYYY.MM.dd}"
    template_name => "snort"
    template_pattern => "snort-*"
    template => {
      "index_patterns" => ["snort-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "src_ip" => { "type" => "ip" },
          "dst_ip" => { "type" => "ip" },
          "src_port" => { "type" => "integer" },
          "dst_port" => { "type" => "integer" },
          "priority" => { "type" => "integer" },
          "protocol" => { "type" => "keyword" },
          "attack_type" => { "type" => "keyword" },
          "classification" => { "type" => "keyword" },
          "alert_msg" => { "type" => "text" },
          "src_geoip" => {
            "properties" => {
              "location" => { "type" => "geo_point" },
              "country_name" => { "type" => "keyword" },
              "city_name" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }
  
  # Debug output
  stdout {
    codec => rubydebug
  }
}