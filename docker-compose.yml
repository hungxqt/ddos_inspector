services:
  # DDoS Inspector main service
  ddos-inspector:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: ddos_inspector:latest
    container_name: ddos_inspector
    privileged: true  # Required for firewall operations and host network access
    network_mode: host  # Direct access to host network interfaces
    environment:
      - NETWORK_INTERFACE=${NETWORK_INTERFACE:-eth0}  # Host's network interface
      - SNORT_INTERFACE=${NETWORK_INTERFACE:-eth0}    # Legacy compatibility
      - ENABLE_METRICS=true
      - WAIT_FOR_INTERFACE=true
      - PROMETHEUS_PORT=9091
      - STATS_PORT=9092
      - HOST_FIREWALL_MODE=true  # Enable host firewall integration
    volumes:
      - ./logs:/var/log/snort
      - ./data:/app/data  # Stats and metrics output
      - ./snort_ddos_config.lua:/etc/snort/snort_ddos_config.lua:ro
      - /proc:/host/proc:ro  # Access to host process info
      - /sys:/host/sys:ro    # Access to host system info
      - /run/xtables.lock:/run/xtables.lock  # Share iptables lock with host
    healthcheck:
      test: ["CMD", "sh", "-c", "snort --version && [ -f /app/data/ddos_inspector_stats ]"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    cap_add:
      - NET_ADMIN  # Required for nftables/iptables operations
      - NET_RAW    # Required for raw packet capture
      - SYS_ADMIN  # Required for host system access
    devices:
      - /dev/net/tun  # TUN/TAP device access if needed

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ddos_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-elk-metrics/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    networks:
      - ddos_net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ddos_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ddos_inspector_2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_SERVER_HTTP_PORT=3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./prometheus-elk-metrics/grafana/provisioning:/etc/grafana/provisioning
      - ./prometheus-elk-metrics/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - ddos_net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Elasticsearch for log storage
  elasticsearch:
    image: elasticsearch:8.15.0
    container_name: ddos_elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx2g
      - network.host=0.0.0.0
      - http.port=9200
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ddos_net

  # Logstash for log processing
  logstash:
    image: logstash:8.15.0
    container_name: ddos_logstash
    ports:
      - "9600:9600"  # Logstash API port
      - "5044:5044"  # Beats input port
    volumes:
      - ./prometheus-elk-metrics/logstash/pipeline:/usr/share/logstash/pipeline
      - ./prometheus-elk-metrics/logstash/config:/usr/share/logstash/config
      - ./logs:/var/log/snort:ro
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
      - xpack.monitoring.enabled=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ddos_net

  # Kibana for log visualization
  kibana:
    image: kibana:8.15.0
    container_name: ddos_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://ddos_elasticsearch:9200
      - SERVER_NAME=ddos-kibana
      - SERVER_PORT=5601
      - xpack.security.enabled=false
      - xpack.encryptedSavedObjects.encryptionKey=32-character-long-encryption-key-here
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ddos_net

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ddos_node_exporter
    network_mode: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.listen-address=0.0.0.0:9100'

  # AlertManager for handling alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ddos_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus-elk-metrics/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - ddos_net

  # DDoS Inspector Metrics Exporter
  ddos-metrics-exporter:
    build:
      context: ./prometheus-elk-metrics
      dockerfile: Dockerfile.metrics
    container_name: ddos_metrics_exporter
    ports:
      - "9091:9091"
    environment:
      - DDOS_STATS_FILE=/app/data/ddos_inspector_stats
      - BIND_ADDRESS=0.0.0.0:9091
    volumes:
      - ./data:/app/data:ro
    networks:
      - ddos_net

  # Snort Stats Exporter
  snort-stats-exporter:
    build:
      context: ./prometheus-elk-metrics
      dockerfile: Dockerfile.snort-stats
    container_name: snort_stats_exporter
    ports:
      - "9092:9092"
    environment:
      - SNORT_STATS_FILE=/var/log/snort/snort_stats.log
      - BIND_ADDRESS=0.0.0.0:9092
    volumes:
      - ./logs:/var/log/snort:ro
    networks:
      - ddos_net

volumes:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  alertmanager_data:

networks:
  ddos_net:
    driver: bridge