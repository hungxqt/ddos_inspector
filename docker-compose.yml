version: '3.8'

services:
  # DDoS Inspector main service
  ddos-inspector:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: ddos_inspector:latest
    container_name: ddos_inspector
    restart: unless-stopped
    privileged: true  # Required for firewall operations
    network_mode: host  # Required for packet capture
    environment:
      - SNORT_INTERFACE=${SNORT_INTERFACE:-eth0}
      - ENABLE_METRICS=true
      - WAIT_FOR_INTERFACE=true
    volumes:
      - ./logs:/var/log/snort
      - ./data:/tmp
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For container metrics
    healthcheck:
      test: ["CMD", "snort", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - prometheus
      - elasticsearch

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ddos_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./Prometheus-ELK\ metrics\ dashboard/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ddos_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ddos_inspector_2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./Prometheus-ELK\ metrics\ dashboard/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - monitoring

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: ddos_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx2g
      - network.host=0.0.0.0
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - logging

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.0
    container_name: ddos_logstash
    restart: unless-stopped
    volumes:
      - ./Prometheus-ELK\ metrics\ dashboard/logstash:/usr/share/logstash/pipeline
      - ./logs:/var/log/snort:ro
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
    depends_on:
      - elasticsearch
    networks:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: ddos_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=ddos-kibana
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - logging

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ddos_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # Alert Manager for notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ddos_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  monitoring:
    driver: bridge
  logging:
    driver: bridge