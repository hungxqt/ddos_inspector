name: Build and Release DDoS Inspector Plugin

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, develop]

env:
  PLUGIN_NAME: ddos_inspector
  BUILD_TYPE: Release

jobs:
  test:
    name: Test on Ubuntu ${{ matrix.ubuntu-version }}
    runs-on: ubuntu-${{ matrix.ubuntu-version }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: [20.04, 22.04]
        compiler: [gcc-10, gcc-12]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libpcap-dev \
          libboost-all-dev \
          nftables \
          iptables \
          pkg-config \
          ${{ matrix.compiler }} \
          ${{ matrix.compiler == 'gcc-10' && 'g++-10' || 'g++-12' }}
    
    - name: Install Snort 3
      run: |
        # Install Snort 3 dependencies
        sudo apt-get install -y \
          libdaq-dev \
          libdnet-dev \
          libhwloc-dev \
          libluajit-5.1-dev \
          libssl-dev \
          libpcre3-dev \
          zlib1g-dev
        
        # Download and build Snort 3 (lightweight for CI)
        cd /tmp
        wget https://github.com/snort3/snort3/archive/refs/tags/3.1.74.0.tar.gz
        tar -xzf 3.1.74.0.tar.gz
        cd snort3-3.1.74.0
        
        # Configure and install
        ./configure_cmake.sh --prefix=/usr/local/snort3 --enable-tcmalloc
        cd build
        make -j$(nproc)
        sudo make install
        
        # Set environment for plugin build
        echo "/usr/local/snort3/lib" | sudo tee -a /etc/ld.so.conf.d/snort3.conf
        sudo ldconfig
    
    - name: Set up compiler
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/${{ matrix.compiler }} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/${{ matrix.compiler == 'gcc-10' && 'g++-10' || 'g++-12' }} 100
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DSNORT3_INCLUDE_DIR=/usr/local/snort3/include/snort
    
    - name: Build plugin
      run: |
        cd build
        make -j$(nproc) ${{ env.PLUGIN_NAME }}
    
    - name: Build tests
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Verify plugin structure
      run: |
        cd build
        file ${{ env.PLUGIN_NAME }}.so
        ldd ${{ env.PLUGIN_NAME }}.so || true
        nm -D ${{ env.PLUGIN_NAME }}.so | grep snort_plugins || true
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-${{ matrix.ubuntu-version }}-${{ matrix.compiler }}
        path: |
          build/Testing/
          build/*.log
        retention-days: 7

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-22.04
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libpcap-dev \
          libboost-all-dev \
          nftables \
          iptables \
          pkg-config \
          gcc-12 \
          g++-12
    
    - name: Install Snort 3
      run: |
        sudo apt-get install -y \
          libdaq-dev \
          libdnet-dev \
          libhwloc-dev \
          libluajit-5.1-dev \
          libssl-dev \
          libpcre3-dev \
          zlib1g-dev
        
        cd /tmp
        wget https://github.com/snort3/snort3/archive/refs/tags/3.1.74.0.tar.gz
        tar -xzf 3.1.74.0.tar.gz
        cd snort3-3.1.74.0
        
        ./configure_cmake.sh --prefix=/usr/local/snort3 --enable-tcmalloc
        cd build
        make -j$(nproc)
        sudo make install
        
        echo "/usr/local/snort3/lib" | sudo tee -a /etc/ld.so.conf.d/snort3.conf
        sudo ldconfig
    
    - name: Build optimized plugin
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=gcc-12 \
          -DCMAKE_CXX_COMPILER=g++-12 \
          -DSNORT3_INCLUDE_DIR=/usr/local/snort3/include/snort \
          -DCMAKE_CXX_FLAGS="-O3 -march=native -flto"
        
        make -j$(nproc) ${{ env.PLUGIN_NAME }}
    
    - name: Create distribution package
      run: |
        mkdir -p dist
        
        # Copy plugin
        cp build/${{ env.PLUGIN_NAME }}.so dist/
        
        # Copy configuration
        cp snort_ddos_config.lua dist/
        
        # Copy documentation
        cp README.md dist/
        cp LICENSE dist/
        cp -r docs/ dist/
        
        # Copy installation scripts
        mkdir -p dist/scripts
        cp scripts/nftables_rules.sh dist/scripts/
        cp scripts/setup_env.sh dist/scripts/
        
        # Create version info
        echo "DDoS Inspector Plugin v${{ steps.version.outputs.version }}" > dist/VERSION
        echo "Built on: $(date)" >> dist/VERSION
        echo "Commit: ${{ github.sha }}" >> dist/VERSION
        
        # Create tarball
        cd dist
        tar -czf ../ddos_inspector-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz *
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ddos-inspector-${{ steps.version.outputs.version }}
        path: |
          dist/
          ddos_inspector-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz
        retention-days: 30
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: DDoS Inspector Plugin ${{ github.ref_name }}
        body: |
          ## DDoS Inspector Plugin ${{ github.ref_name }}
          
          ### What's New
          - Real-time DDoS detection and mitigation for Snort 3
          - Statistical analysis using EWMA and entropy detection
          - Behavioral profiling for TCP/HTTP traffic
          - Automated firewall integration with nftables
          
          ### Installation
          1. Download the plugin file: `ddos_inspector.so`
          2. Copy to Snort 3 plugins directory: `/usr/local/lib/snort3_extra_plugins/`
          3. Configure in your `snort.lua` file
          4. Run setup scripts for firewall rules
          
          ### Files Included
          - `ddos_inspector.so` - Main plugin library
          - `snort_ddos_config.lua` - Example configuration
          - `scripts/` - Installation and setup scripts
          - `docs/` - Documentation and guides
          
          ### System Requirements
          - Snort 3.1.74.0 or later
          - Ubuntu 20.04/22.04 or compatible Linux distribution
          - nftables or iptables for mitigation
          
          ### Performance
          - <10ms latency under high load
          - <5% CPU overhead at 10k pps
          - Memory usage <50MB for 24h operation
        draft: false
        prerelease: false
    
    - name: Upload Release Asset - Plugin
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ddos_inspector.so
        asset_name: ddos_inspector.so
        asset_content_type: application/octet-stream
    
    - name: Upload Release Asset - Full Package
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ddos_inspector-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz
        asset_name: ddos_inspector-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz
        asset_content_type: application/gzip

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'